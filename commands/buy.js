const { loadDb, saveDb, ensureUser } = require('../utils/db');
const { loadLinks } = require('../utils/links');
const { mainKeyboard } = require('../keyboards');

function handlePurchase(ctx, index, cost) {
    const db = loadDb();
    const userId = ctx.from.id.toString();
    ensureUser(db, userId);

    const user = db.users[userId];
    const links = loadLinks();
    const link = links[index];

    if (!link) return ctx.reply('‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', mainKeyboard);
    if (user.usedLinks.includes(link)) return ctx.reply('‚ö†Ô∏è –£–∂–µ –∫—É–ø–ª–µ–Ω–æ.', mainKeyboard);
    if (user.balance < cost) return ctx.reply('üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.', mainKeyboard);

    user.balance -= cost;
    user.usedLinks.push(link);
    saveDb(db);

    ctx.reply(`‚úÖ –°—Å—ã–ª–∫–∞: ${link}`, mainKeyboard);
}

module.exports = (bot) => {
    bot.hears('üì• –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø', (ctx) => {
        const buttons = [
            ['150 –∞—Ä—Ö–∏–≤–æ–≤ ‚Äî 500 ‚ÇΩ'],
            ['450 –∞—Ä—Ö–∏–≤–æ–≤ ‚Äî 1200 ‚ÇΩ'],
            ['1000 –∞—Ä—Ö–∏–≤–æ–≤ ‚Äî 2300 ‚ÇΩ'],
            ['–≤—Å–µ –∫–∞–Ω–∞–ª—ã ‚Äî 3500 ‚ÇΩ'],
            ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
        ];
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø:', {
            reply_markup: { keyboard: buttons, resize_keyboard: true }
        });
    });

    bot.hears('150 –∞—Ä—Ö–∏–≤–æ–≤ ‚Äî 500 ‚ÇΩ', (ctx) => handlePurchase(ctx, 0, 500));
    bot.hears('450 –∞—Ä—Ö–∏–≤–æ–≤ ‚Äî 1200 ‚ÇΩ', (ctx) => handlePurchase(ctx, 1, 1200));
    bot.hears('1000 –∞—Ä—Ö–∏–≤–æ–≤ ‚Äî 2300 ‚ÇΩ', (ctx) => handlePurchase(ctx, 2, 2300));
    bot.hears('–≤—Å–µ –∫–∞–Ω–∞–ª—ã ‚Äî 3500 ‚ÇΩ', (ctx) => handlePurchase(ctx, 3, 3500));

    bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => {
        ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainKeyboard);
    });
};